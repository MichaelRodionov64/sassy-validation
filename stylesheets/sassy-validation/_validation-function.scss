///
/// Validates input against various tests
///
/// @param {*} $var - a variable to be tested
/// @param {bool|color|empty|float|integer|list|map|measure-negative|measure-positive|measure|negative|positive|null|number|string|unit}Â $validations - list of validation tests to run against `$var`
///
/// @return {bool}
///
/// @throws '$var is not a known validation type.'
///
/// @example
///   validate(1em, measure)     		// returns true
///   validate(100, number positive)    // returns true
///   validate(1, number)        	    // returns true
///   validate(1, string)        	    // returns false
///

@function validate($var, $validations) {
	$all-types: bool, color, empty, float, integer, list, map, measure, measure-positive, measure-negative, negative, null, number, positive, string, unit;
	@if $validations == any {
		@return true;
	}
	//if there is more than one validation test
	@if length($validations) > 1 {
		//break function if validation is not a known data type
		@each $validation in $validations {
			@if not index($all-types, $validation) {
				@warn '#{$validation} is not a known validation type.';
				@return false;
			}
		}
	}
	//collect validation errors
	$errors: ();
	//check each validation and set 1 for each failure
	@each $validation in $validations {
		@if $validation == measure {
			@if not is-measure($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == list {
			@if not is-list($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == color {
			@if not is-color($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == bool {
			@if not is-bool($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == null {
			@if not is-null($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == string {
			@if not is-string($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == number {
			@if not is-number($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == unit {
			@if not is-unit($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == integer {
			@if not is-integer($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == float {
			@if not is-float($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == negative {
			@if not is-negative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == positive {
			@if not is-positive($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == map {
			@if not is-map($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measure-negative {
			@if not is-measure-negative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measure-positive {
			@if not is-measure-positive($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == empty {
			@if not is-empty($var) {
				$errors: append($errors, 1);
			}
		}
		// as we checked earlier $validation must be one of our data types
		// so this condition may never be encountered but just in case..return false
		@else {
			@return false;
		}
	}
	//throw an error if there are as many validation errors as validation tests because all checked types failed
	@if length($errors) >= length($validations) {
		@return false;
	}
	//at least one of tested types must be valid
	@else {
		@return true;
	}
}
